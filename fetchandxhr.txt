
xhr spec at : https://xhr.spec.whatwg.org/
xhr has api like:
var xhr = new XMLHttpRequest();
xhr.open('GET', url); // creating a request
xhr.send(); //actually sending a request

// processing the response
xhr.onload = function() {
  console.log(xhr.response);
}
xhr.onerror = function() {
  console.log("boo");
}




The body shape/interface :
interface Body {
  readonly attribute ReadableStream? body;
  readonly attribute boolean bodyUsed;
  [NewObject] Promise<ArrayBuffer> arrayBuffer();
  [NewObject] Promise<Blob> blob();
  [NewObject] Promise<FormData> formData();
  [NewObject] Promise<any> json();
  [NewObject] Promise<USVString> text();
};

fetch is a lower level api for sending requests that gives
more control.
fetch spec present at https://fetch.spec.whatwg.org/
In fetch system, we have full fledged classes/structs
that are well known as Request and Response.

making a Request object:

1. url only :
var myRequest = new Request('http://localhost/flowers.jpg');
console.log(myRequest.url); // http://localhost/flowers.jpg
console.log(myRequest.method // 'Get' is default

2. url with configuration:
var myRequest = new Request('http://localhost/api', {method: 'POST', body: '{"foo":"bar"}'});
 
var myURL = myRequest.url; // http://localhost/api
var myMethod = myRequest.method; // POST
var myCred = myRequest.credentials; // omit
var bodyUsed = myRequest.bodyUsed; // true


Response shape = Body shape + (type, url, ok, statusText, headers)

Calling fetch(myRequest) returns a Promise<Response>

